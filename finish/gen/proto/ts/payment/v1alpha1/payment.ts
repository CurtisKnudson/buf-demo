// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "payment/v1alpha1/payment.proto" (package "payment.v1alpha1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Money } from "../../google/type/money";
/**
 * Order represents a monetary order.
 *
 * @generated from protobuf message payment.v1alpha1.Order
 */
export interface Order {
    /**
     * @generated from protobuf field: string order_id = 1;
     */
    orderId: string;
    /**
     * @generated from protobuf field: string recipient_id = 2;
     */
    recipientId: string;
    /**
     * @generated from protobuf field: google.type.Money amount = 3;
     */
    amount?: Money;
    /**
     * @generated from protobuf field: payment.v1alpha1.PaymentProvider payment_provider = 4;
     */
    paymentProvider: PaymentProvider;
}
/**
 * PaymentProvider represents the supported set
 * of payment providers.
 *
 * @generated from protobuf enum payment.v1alpha1.PaymentProvider
 */
export enum PaymentProvider {
    /**
     * @generated from protobuf enum value: PAYMENT_PROVIDER_UNSPECIFIED = 0;
     */
    UNSPECIFIED = 0,
    /**
     * @generated from protobuf enum value: PAYMENT_PROVIDER_STRIPE = 1;
     */
    STRIPE = 1,
    /**
     * @generated from protobuf enum value: PAYMENT_PROVIDER_PAYPAL = 2;
     */
    PAYPAL = 2,
    /**
     * @generated from protobuf enum value: PAYMENT_PROVIDER_APPLE = 3;
     */
    APPLE = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class Order$Type extends MessageType<Order> {
    constructor() {
        super("payment.v1alpha1.Order", [
            { no: 1, name: "order_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "recipient_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "amount", kind: "message", T: () => Money },
            { no: 4, name: "payment_provider", kind: "enum", T: () => ["payment.v1alpha1.PaymentProvider", PaymentProvider, "PAYMENT_PROVIDER_"] }
        ]);
    }
    create(value?: PartialMessage<Order>): Order {
        const message = { orderId: "", recipientId: "", paymentProvider: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Order>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Order): Order {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string order_id */ 1:
                    message.orderId = reader.string();
                    break;
                case /* string recipient_id */ 2:
                    message.recipientId = reader.string();
                    break;
                case /* google.type.Money amount */ 3:
                    message.amount = Money.internalBinaryRead(reader, reader.uint32(), options, message.amount);
                    break;
                case /* payment.v1alpha1.PaymentProvider payment_provider */ 4:
                    message.paymentProvider = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Order, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string order_id = 1; */
        if (message.orderId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.orderId);
        /* string recipient_id = 2; */
        if (message.recipientId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.recipientId);
        /* google.type.Money amount = 3; */
        if (message.amount)
            Money.internalBinaryWrite(message.amount, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* payment.v1alpha1.PaymentProvider payment_provider = 4; */
        if (message.paymentProvider !== 0)
            writer.tag(4, WireType.Varint).int32(message.paymentProvider);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message payment.v1alpha1.Order
 */
export const Order = new Order$Type();
